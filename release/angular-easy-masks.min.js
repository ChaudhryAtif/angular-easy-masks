// https://github.com/awerlang/angular-easy-masks
!function(){"use strict";function mapToRegExp(item){var map={};return map[0]="\\d*?",map[9]="\\d?",map.A="[\\dA-Za-z]*?",map.L="[A-Za-z]?",map.Z="[A-Za-z]*?",map[item]}function isSeparator(char){return void 0===mapToRegExp(char)}function wildcardToMapper(item){var noop=function(item){return item||""},map={};return map.A=function(item){return item.toUpperCase()},map.L=function(item){return item.toUpperCase()},map.Z=function(item){return item.toLowerCase()},map[item]||noop}function buildRegExp(mask){function createReplacer(wildcardsInMask){return function(group){return Array.prototype.reduce.call(group,function(previous,current,index){return previous+wildcardToMapper(wildcardsInMask[index])(current)},"")}}for(var groups,result="",re=/([^09ALZ]*)?([09ALZ]*)+/g,separators=[],mappers=[];null!==(groups=re.exec(mask))&&""!==groups[0];){separators.push(groups[1]);var wildcardsInMask=groups[2].split("");result+="("+wildcardsInMask.map(mapToRegExp).join("")+")?",mappers.push(createReplacer(wildcardsInMask))}return{regExp:new RegExp("^"+result+"$"),separators:separators,mappers:mappers}}function easyMask(input,mask){if("string"!=typeof input||"string"!=typeof mask||""===mask)return null;if(isSeparator(mask[mask.length-1]))throw new Error("Mask must not end with a separator: "+mask[mask.length-1]);var re=buildRegExp(mask),matches=re.regExp.exec(input.replace(/[^\dA-Za-z]/g,""));if(matches){for(var runningValue="",separatorsToInsert=re.separators,index=1,len=matches.length;len>index&&void 0!==matches[index];){var mapper=re.mappers[index-1];runningValue+=(separatorsToInsert[index-1]||"")+mapper(matches[index]),index++}return runningValue}return""}function wtEasyMask($parse,easyMask){return{restrict:"A",require:"ngModel",link:function(scope,element,attrs,ngModelCtrl){var mask=easyMask.getMask(attrs.wtEasyMask)||attrs.placeholder||"";attrs.maxlength||attrs.$set("maxlength",mask.length),attrs.placeholder||attrs.$set("placeholder",mask);var options=attrs.wtEasyMaskOptions?$parse(attrs.wtEasyMaskOptions)(scope):{},removeSeparators=options.removeSeparators,isCompleted=function(value){var zeroes=mask.match(/0/g),optionalsCount=zeroes?zeroes.length:0;return mask.length-optionalsCount<=value.length},isValid=function(modelValue,viewValue){return null==viewValue||0===viewValue.length||isCompleted(viewValue)};ngModelCtrl.$validators.mask=function(modelValue,viewValue){return isValid(modelValue,viewValue)},ngModelCtrl.$formatters.push(function(value){var formattedValue=easyMask(value,mask);return""!==formattedValue?formattedValue:value}),ngModelCtrl.$parsers.push(function(value){var parsedValue=easyMask(value,mask);return removeSeparators&&(parsedValue=parsedValue.replace(/[.\-/ ]/g,"")),""===parsedValue?null:parsedValue}),element.on("keypress",function(event){var keyIsSpace=32===event.which;if(keyIsSpace)event.preventDefault();else{var currentValue=element.val(),futureValue=currentValue.substring(0,element.prop("selectionStart"))+String.fromCharCode(event.which)+currentValue.substring(element.prop("selectionEnd")),parsedValue=easyMask(futureValue,mask);parsedValue.length<currentValue.length&&event.preventDefault()}}),element.on("input",function(event){var parsedValue=easyMask(element.val(),mask);ngModelCtrl.$viewValue!==parsedValue&&(ngModelCtrl.$setViewValue(parsedValue),ngModelCtrl.$render())})}}}function easyMaskFilter(easyMask){return function(input,mask){return easyMask(input,mask)}}angular.module("wt.easy",[]).directive("wtEasyMask",["$parse","easyMask",wtEasyMask]).provider("easyMask",function(){var registry=Object.create(null);this.publishMask=function(publishedName,mask){registry[publishedName.toLowerCase()]=mask},this.$get=function(){return easyMask.getMask=function(mask){return registry[mask.toLowerCase()]||mask},easyMask}}).filter("easyMask",["easyMask",easyMaskFilter])}();